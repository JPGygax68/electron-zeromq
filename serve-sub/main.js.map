{"version":3,"sources":["webpack:///./$_lazy_route_resource lazy namespace object","webpack:///./src/app/app.component.css","webpack:///./src/app/app.component.html","webpack:///./src/app/app.component.ts","webpack:///./src/app/app.module.ts","webpack:///./src/environments/environment.ts","webpack:///./src/main.ts","webpack:///external \"require('zeromq')\""],"names":[],"mappings":";;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE;AACF;AACA,4CAA4C,WAAW;AACvD;AACA;AACA,wE;;;;;;;;;;;ACZA,+DAA+D,2J;;;;;;;;;;;ACA/D,8JAA8J,qBAAqB,wD;;;;;;;;;;;;;;;;;;;;;;;;;;ACAjI;AAClD,kEAAkE;AAC1B;AAOxC;IAKE,uBAAY,kEAAkE;QAJ9E,UAAK,GAAG,mBAAmB,CAAC;QAM1B,IAAI,CAAC,MAAM,GAAG,qDAAM,CAAC,KAAK,CAAC,CAAC;QAC5B,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,sBAAsB,CAAC,CAAC;QAC5C,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,WAAW,CAAC,CAAC;QACnC,OAAO,CAAC,GAAG,CAAC,gEAAgE,CAAC,CAAC;QAC9E,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC,SAAS,EAAE,UAAC,KAAa,EAAE,OAAe;YACvD,OAAO,CAAC,GAAG,CAAC,qBAAqB,GAAG,OAAO,GAAG,GAAG,CAAC,CAAC;QACrD,CAAC,CAAC,CAAC;IACL,CAAC;IAdU,YAAY;QALxB,+DAAS,CAAC;YACT,QAAQ,EAAE,UAAU;YACpB,yFAAmC;;SAEpC,CAAC;;OACW,YAAY,CAexB;IAAD,mBAAC;CAAA;AAfwB;;;;;;;;;;;;;;;;;;;;;;;;;ACT+B;AACjB;AAGM;AAC7C,kDAAkD;AAClD,oFAAoF;AACrC;AAC/C,kEAAkE;AAyBlE;IAAA;IACA,CAAC;IADY,SAAS;QAtBrB,8DAAQ,CAAC;YACR,YAAY,EAAE;gBACZ,2DAAY;aACb;YACD,OAAO,EAAE;gBACP,uEAAa;gBACb,8DAAiB;aAClB;YACD,SAAS,EAAE;YACT;;;;iBAIK;YACL;;;;gBAII;aACL;YACD,SAAS,EAAE,CAAC,2DAAY,CAAC;SAC1B,CAAC;OACW,SAAS,CACrB;IAAD,gBAAC;CAAA;AADqB;;;;;;;;;;;;;ACjCtB;AAAA;AAAA,gFAAgF;AAChF,0EAA0E;AAC1E,gEAAgE;AAEzD,IAAM,WAAW,GAAG;IACzB,UAAU,EAAE,KAAK;CAClB,CAAC;AAEF;;;;;;GAMG;AACH,mEAAmE;;;;;;;;;;;;;ACfnE;AAAA;AAAA;AAAA;AAAA;AAA+C;AAC4B;AAE9B;AACY;AAEzD,IAAI,qEAAW,CAAC,UAAU,EAAE;IAC1B,oEAAc,EAAE,CAAC;CAClB;AAED,gGAAsB,EAAE,CAAC,eAAe,CAAC,yDAAS,CAAC;KAChD,KAAK,CAAC,aAAG,IAAI,cAAO,CAAC,KAAK,CAAC,GAAG,CAAC,EAAlB,CAAkB,CAAC,CAAC;;;;;;;;;;;;;;;;;;;;;;;;ACXpC,mC","file":"main.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJwcm9qZWN0cy9zdWJzY3JpYmVyL3NyYy9hcHAvYXBwLmNvbXBvbmVudC5jc3MifQ== */\"","module.exports = \"<!--\\n<h2>Natively loaded strings: </h2>\\n<ul>\\n  <li *ngFor=\\\"let provider of linkProviders\\\">\\n    <h2><a [href]=\\\"provider.getLink()\\\">{{provider.getTitle()}}</a></h2>\\n  </li>\\n</ul>\\n-->\\n<h2>Subscriber</h2>\\n\\n\"","import { Component, Inject } from '@angular/core';\n// import { LINK_PROVIDERS, LinkProvider } from './link-provider';\nimport { socket, Socket } from 'zeromq';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  title = 'ZeroMQ Subscriber';\n\n  socket: Socket;\n\n  constructor(/* @Inject(LINK_PROVIDERS) public linkProviders: LinkProvider[] */) {\n\n    this.socket = socket('sub');\n    this.socket.connect('tcp://127.0.0.1:3000');\n    this.socket.subscribe('Greetings');\n    console.log('Socket connected to port 3000, subscribed to topic \"Greetings\"');\n    this.socket.on('message', (topic: string, message: string) => {\n      console.log('Message received: \"' + message + '\"');\n    });\n  }\n}\n","import {BrowserModule} from '@angular/platform-browser';\nimport {NgModule} from '@angular/core';\n\n\nimport {AppComponent} from './app.component';\n// import {LINK_PROVIDERS} from './link-provider';\n// import {PrecompiledLibraryLinkService} from './precompiled-library-link.service';\nimport {NgxElectronModule} from 'ngx-electron';\n// import {NodeAddonLinkService} from './node-addon-link.service';\n\n\n@NgModule({\n  declarations: [\n    AppComponent\n  ],\n  imports: [\n    BrowserModule,\n    NgxElectronModule\n  ],\n  providers: [\n    /* {\n      provide: LINK_PROVIDERS,\n      useClass: NodeAddonLinkService,\n      multi: true\n    }, */\n    /* {\n      provide: LINK_PROVIDERS,\n      useClass: PrecompiledLibraryLinkService,\n      multi: true\n    } */\n  ],\n  bootstrap: [AppComponent]\n})\nexport class AppModule {\n}\n\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n","module.exports = require('zeromq');"],"sourceRoot":""}